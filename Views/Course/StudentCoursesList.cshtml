@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@using System.Data;

@{
	Layout = "_LecturerMainLayout";
	var courses = ViewData["courses"] as DataTable;
	string kiem_tra_tinh_trang(string ngay_bat_dau, string ngay_ket_thuc)
	{
		DateTime datetime_bat_dau = DateTime.ParseExact(ngay_bat_dau, "dd/MM/yyyy", null);
		DateTime datetime_ket_thuc = DateTime.ParseExact(ngay_ket_thuc, "dd/MM/yyyy", null);
		DateTime datetime_hien_tai = DateTime.Now;

		datetime_bat_dau = datetime_bat_dau.Date;
		datetime_ket_thuc = datetime_ket_thuc.Date.AddHours(23).AddMinutes(59).AddSeconds(59);

		if (datetime_bat_dau <= datetime_hien_tai && datetime_ket_thuc >= datetime_hien_tai)
		{
			return "<span class=\"class__item--inprocess\">Đang diễn ra</span>";
		}
		else if (datetime_ket_thuc < datetime_hien_tai)
		{
			return "<span class=\"class__item--over\">Đã kết thúc</span>";
		}
		else
		{

			return "<span class=\"class__item--upcoming\">Sắp diễn ra</span>";
		}
	}
}

@section Navbar {
	@await Html.PartialAsync("Navbar")
}

@section MainSection {
	<div class="main">
		<div style="margin-bottom: 30px;" class="title w-100 text-center text-uppercase">
			<h4>Danh sách lớp học</h4>
		</div>

		<div class="class-container">
			<div style="height: 30px;" class="class__search me-2 d-flex justify-content-end">

				<input style="border-radius: 0; height: 30px; width: 90px; z-index: 3" type="text" class="w-25 form-control search-input" placeholder="Tìm khóa học">
				<button class="btn btn-info search-button highlight-button"><i class="fas fa-search icon-search highlight-icon" style=""></i></button>


			</div>

		</div>

		<div class="class__list p-4 border border-gray rounded-2 m-2 mt-3 shadow-inset" style="margin-top: 8px!important;">
			<div class="row mb-4">
				@{
					for (int i = 0; i < courses.Rows.Count; i++)
					{
						string dsgv = "";
						int y = 0;
						foreach (DataRow lecturer in ((DataTable)(courses.Rows[i]["lecturers"])).Rows)
						{
							dsgv = dsgv + (y != 0 ? ", " : "") + "<a href='" + "/profile/lecturer?id=" + lecturer["id_giang_vien"] + "'>" + lecturer["ho_ten"] + "</a>";
							y++;
						}
						string status = kiem_tra_tinh_trang(courses.Rows[i]["ngay_bat_dau"].ToString(), courses.Rows[i]["ngay_ket_thuc"].ToString());
						string courseid = courses.Rows[i]["id_mon_hoc"].ToString().PadLeft(3, '0') + "." + courses.Rows[i]["id_lop_hoc"].ToString().PadLeft(6, '0');

						<div class='class__item col-4 col-xxl-4' courseid='@courses.Rows[i]["id_lop_hoc"]'>
							<div class='p-3 border border-gray rounded-2 shadow-sm class-div'>
								<div class='class__item__title mb-5'>
									<h6>@courses.Rows[i]["ten_mon_hoc"] @Html.Raw(courseid)</h6>
									<p>Giảng viên: @Html.Raw(dsgv)</p>
								</div>
								<div class='class__item__state'>
									<p>Thời gian: @courses.Rows[i]["ngay_bat_dau"] - @courses.Rows[i]["ngay_ket_thuc"]</p>
									<p>Trạng thái: @Html.Raw(status)</p>
								</div>
								<input type='checkbox' class='delete-checkbox' value='@courses.Rows[i]["id_lop_hoc"]'>


							</div>
						</div>

					}
				}
			</div>
		</div>
		<script>
			setInterval(reloadCoursesList, 10000);
			$(document).ready(function () {
				$(document).on('click', '.class-div', function () {
					window.location.href = `/courses/information?courseid=${$(this).parent().attr('courseid')}`;
				});
			});

			function reloadCoursesList() {
				console.log("kkk");
				$.ajax({
					url: '/Course/getListOfCoursesForStudent',
					method: 'GET',
					contentType: 'application/json', // Đặt kiểu dữ liệu của yêu cầu là JSON
					data: null,
					dataType: 'json',
					success: function (response) { // Trả về mảng
						// jquery từ html tạo mảng current(id-ngaybd) gồm các khóa đang hiển thị
						console.log("kkk2");
						console.log(response);
						// console.log(response[0]['lecturers']);
						let current = [];
						let toDelete = [];
						let toAdd = [];
						$(`.class__list .class__item`).each(function () {
							current.push({
								"id_lop_hoc": `${$(this).attr(`courseid`)}`,
								// "id_lop_hoc": `1`,

							});
						})
						console.log('current: ');
						console.log(current.length)
						console.log('current: ');

						// duyệt từng phần tử ở mảng current so với mảng response, phần tử nào không có(đã xóa) hoặc có nhưng không trùng ngày thì xóa khỏi mảng current và thêm vào mảng toDelete
						for (let i = 0; i < current.length; i++) {
							let isAppear = false;
							for (let j = 0; j < response.length; j++) {
								console.log(response[j][`id_lop_hoc`] + " " + current[i][`id_lop_hoc`])
								if (response[j][`id_lop_hoc`] == current[i][`id_lop_hoc`]) {
									isAppear = true;
									break;
								}
							}
							if (!isAppear) {
								toDelete.push(i);
								console.log(current[i][`id_lop_hoc`]);
							}
						}
						console.log('current: ');
						console.log(current);
						console.log('current: ');
						console.log("todel:" + toDelete)
						for (let i = toDelete.length - 1; i >= 0; i--) {
							current.splice(toDelete[i], 1);
							$(`.class__list .class__item`).eq(i).remove();
						}
						console.log('current: ' + current);

						// duyệt từng phần tử ở mảng response, phần tử nào không có id ở mảng current thì thêm vào mảng toAdd
						for (let i = 0; i < response.length; i++) {
							let isAppear = false;
							for (let j = 0; j < current.length; j++) {
								if (response[i][`id_lop_hoc`] == current[j][`id_lop_hoc`]) {
									isAppear = true;
									break;
								}
							}
							if (!isAppear) {
								let dsgv = "";
								let y = 0;
								response[i]['lecturers'].forEach((lecturer) => {
									dsgv += (y !== 0 ? ', ' : '') + '<a href="/profile/lecturer?id=' + lecturer.id_giang_vien + '">' + lecturer.ho_ten + '</a>';
									y++;
								});

								let status = kiem_tra_tinh_trang(response[i]["ngay_bat_dau"], response[i]["ngay_ket_thuc"]);
								let courseid = String(response[i].id_mon_hoc).padStart(3, '0') + "." + String(response[i].id_lop_hoc).padStart(6, '0');
								$(`.class__list .class__item`).eq(i).before(
									`
																						<div class='class__item col-4 col-xxl-4' courseid='${response[i]["id_lop_hoc"]}' >
																							<div class='p-3 border border-gray rounded-2 shadow-sm class-div' style="animation: newClassEffect ease 3s">
																								<div class='class__item__title mb-5'>
																									<h6>${response[i]["ten_mon_hoc"]} ${courseid}</h6>
																									<p>Giảng viên: ${dsgv}</p>
																								</div>
																								<div class='class__item__state'>
																									<p>Thời gian: ${response[i]['ngay_bat_dau']} - ${response[i]["ngay_ket_thuc"]}</p>
																									<p>Trạng thái: ${status}</p>
																								</div>
																								<input type='checkbox' class='delete-checkbox' value='${response[i].id_lop_hoc}'>

																							</div>
																						</div>
																				`
								);

							}
						}
						//
						// Với mỗi
					}
				})
			}


			function kiem_tra_tinh_trang(ngay_bat_dau, ngay_ket_thuc) {
				// Chuyển đổi chuỗi ngày thành đối tượng Date
				let datetime_bat_dau = chuyenChuoiThanhDate(ngay_bat_dau);
				let datetime_ket_thuc = chuyenChuoiThanhDate(ngay_ket_thuc);
				let datetime_hien_tai = new Date();

				// Đặt giờ, phút và giây về cuối ngày
				datetime_bat_dau.setHours(0, 0, 0, 0);
				datetime_ket_thuc.setHours(23, 59, 59, 999);

				if (datetime_bat_dau <= datetime_hien_tai && datetime_ket_thuc >= datetime_hien_tai) {
					return '<span class="class__item--inprocess">Đang diễn ra</span>';
				} else if (datetime_ket_thuc < datetime_hien_tai) {
					return '<span class="class__item--over">Đã kết thúc</span>';
				} else {
					return '<span class="class__item--upcoming">Sắp diễn ra</span>';
				}
			}

			// Hàm chuyển đổi chuỗi ngày thành đối tượng Date
			function chuyenChuoiThanhDate(chuoiNgay) {
				let parts = chuoiNgay.split('/');
				return new Date(parts[2], parts[1] - 1, parts[0]);
			}

		</script>
	</div>

}
